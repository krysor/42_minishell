!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(DEPS)	Makefile	/^$(DEPS):$/;"	t
$(LIB)	Makefile	/^$(LIB): $(OBJS)$/;"	t
CFLAGS	Makefile	/^CFLAGS =		$/;"	m
DYNMEM_H	includes/dmy.h	/^# define DYNMEM_H$/;"	d
FLAGS	Makefile	/^FLAGS =			$(CFLAGS) $(FTFLAGS)$/;"	m
FREEALL	includes/dmy.h	/^# define FREEALL /;"	d
FREEONE	includes/dmy.h	/^# define FREEONE /;"	d
FTFLAGS	Makefile	/^FTFLAGS = 		-Wall -Wextra -Werror$/;"	m
HEADER	Makefile	/^HEADER =		includes\/$(PROJECT).h$/;"	m
LIB	Makefile	/^LIB =			lib$(PROJECT).a$/;"	m
MALLOC	includes/dmy.h	/^# define MALLOC /;"	d
NAME	Makefile	/^NAME =			$(PROJECT)$/;"	m
OBJS	Makefile	/^OBJS =			$(addprefix obj\/, $(addsuffix .o, $(SRCS)))$/;"	m
OBJS_MAIN	Makefile	/^OBJS_MAIN =		$(addprefix obj\/, $(addsuffix .o, $(SRC_MAIN)))$/;"	m
PROJECT	Makefile	/^PROJECT =		dmy$/;"	m
SRCS	Makefile	/^SRCS =			dynmem\\$/;"	m
SRC_MAIN	Makefile	/^SRC_MAIN = 		$/;"	m
all	Makefile	/^all:	$(LIB)$/;"	t
clean	Makefile	/^clean:$/;"	t
debug	Makefile	/^debug:$/;"	t
dmy_action_free	src/actions_switch.c	/^void	dmy_action_free(t_dmy **lst, void *ptr)$/;"	f	typeref:typename:void
dmy_action_freeall	src/actions_switch.c	/^void	dmy_action_freeall(t_dmy *lst)$/;"	f	typeref:typename:void
dmy_action_malloc	src/actions_switch.c	/^void	*dmy_action_malloc(t_dmy **lst, size_t size)$/;"	f	typeref:typename:void *
dmy_free	src/dynmem.c	/^void	dmy_free(void *ptr)$/;"	f	typeref:typename:void
dmy_freeall	src/dynmem.c	/^void	dmy_freeall(void)$/;"	f	typeref:typename:void
dmy_lst_add	src/lst.c	/^t_dmy	*dmy_lst_add(t_dmy **lst, void *mem)$/;"	f	typeref:typename:t_dmy *
dmy_lst_delnext	src/lst_utils.c	/^int	dmy_lst_delnext(t_dmy **lst, t_dmy *prev)$/;"	f	typeref:typename:int
dmy_lst_findprev	src/lst_utils.c	/^t_dmy	*dmy_lst_findprev(t_dmy *lst, void *find)$/;"	f	typeref:typename:t_dmy *
dmy_lst_free	src/lst.c	/^void	dmy_lst_free(t_dmy *lst)$/;"	f	typeref:typename:void
dmy_lst_remove	src/lst.c	/^int	dmy_lst_remove(t_dmy **lst, void *remove)$/;"	f	typeref:typename:int
dmy_lstlast	src/lst_utils.c	/^t_dmy	*dmy_lstlast(t_dmy *lst)$/;"	f	typeref:typename:t_dmy *
dmy_malloc	src/dynmem.c	/^void	*dmy_malloc(size_t size)$/;"	f	typeref:typename:void *
dmy_switch	src/actions_switch.c	/^void	*dmy_switch(int action, size_t size, void *ptr)$/;"	f	typeref:typename:void *
fclean	Makefile	/^fclean: clean$/;"	t
lib	Makefile	/^lib: $(LIB)$/;"	t
mem	includes/dmy.h	/^	void			*mem;$/;"	m	struct:s_dmy	typeref:typename:void *
next	includes/dmy.h	/^	struct s_dmy	*next;$/;"	m	struct:s_dmy	typeref:struct:s_dmy *
obj/%.o	Makefile	/^obj\/%.o: src\/%.c $(HEADER)$/;"	t
re	Makefile	/^re: fclean all$/;"	t
s_dmy	includes/dmy.h	/^typedef struct	s_dmy$/;"	s
t_dmy	includes/dmy.h	/^}				t_dmy;$/;"	t	typeref:struct:s_dmy
